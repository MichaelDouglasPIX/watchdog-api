services:
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: always
    volumes:
      - "/proc:/host/proc:ro"
      - "/sys:/host/sys:ro"
      - "/:/rootfs:ro"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"'
    #network_mode: "host"
    ports:
      - "9100:9100"
    networks:
      - monitoring
      - api

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/alert.rules:/etc/prometheus/alert.rules
    ports:
      - "9090:9090"
    networks:
      - monitoring
      - api
    depends_on:
      - node-exporter

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    volumes:
      - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - monitoring

  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: always
    expose:
      - 3100
    volumes:
      - ./docker/loki/loki-config.yml:/etc/loki/local-config.yml
      - loki-data:/loki
    depends_on:
      - grafana
    networks:
      - monitoring
      - api

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
    networks:
      - monitoring
      - api
    depends_on:
      - loki

  watchdog-api:
    build:
      context: .
    container_name: watchdog-api
    expose:
      - 8080
    networks:
      - api
    depends_on:
      - jaeger

  proxy-watchdog-api:
    build:
      context: ./docker/nginx
      dockerfile: dockerfile
    image: proxy-watchdog-api
    container_name: proxy-watchdog-api
    volumes:
      - ./docker/nginx/opentelemetry_module.conf:/etc/nginx/conf.d/opentelemetry_module.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 80:80
    networks:
      - public
      - api
    depends_on:
      - watchdog-api

  alertmanager:
    build:
      context: ./docker/alert-manager
      dockerfile: dockerfile
    container_name: alertmanager
    env_file:
    - .env
    entrypoint: >
      sh -c "envsubst < /etc/alertmanager/alertmanager.yml.template > /etc/alertmanager/alertmanager.yml && 
           /bin/alertmanager --config.file=/etc/alertmanager/alertmanager.yml"
    ports:
      - "9093:9093"
    networks:
      - monitoring
    depends_on:
      - proxy-watchdog-api
  
  client:
    image: request-generator
    build:
      context: ./docker/
      dockerfile: dockerfile
    container_name: request-generator
    depends_on:
      - alertmanager
    networks:
      - public


networks:
  public:
  api:
    internal: 
      true
  monitoring:
    driver: bridge

volumes:
  loki-data: